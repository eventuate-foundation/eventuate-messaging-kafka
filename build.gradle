buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

allprojects {
    group = "io.eventuate.messaging.kafka"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'com.jfrog.bintray'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    bintray {
        publish = true
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        configurations = ['archives']
        pkg {
            repo = "eventuate-maven-$bintrayRepoType"
            name = 'eventuate-messaging-kafka'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/eventuate-incubator/eventuate-messaging-kafka.git'
        }
    }


    repositories {
        mavenLocal()
        maven {
            url 'https://maven.aliyun.com/repository/public'
        }

        maven {
            credentials {
                username 'RSCkuC'
                password 'zycz2M6hgM'
            }
            url 'https://repo.rdc.aliyun.com/repository/4996-release-bbQLyQ/'
        }
        maven {
            credentials {
                username 'RSCkuC'
                password 'zycz2M6hgM'
            }
            url 'https://repo.rdc.aliyun.com/repository/4996-snapshot-B1DsL7/'
        }


        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/milestone" }
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }

    dependencies {
        testCompile "junit:junit:4.12"
    }

    uploadArchives {
        repositories {
            mavenDeployer {

                repository(url: 'https://repo.rdc.aliyun.com/repository/4996-release-bbQLyQ/'){
                    authentication(userName: 'RSCkuC', password: 'zycz2M6hgM')
                }

            }
        }
    }
}



//task wrapper(type: Wrapper) {
//    gradleVersion = '4.4'
//}



gradle.projectsEvaluated {
    task aggregateJavaDocs(type: Javadoc) {
        description = 'Aggregated Javadoc API documentation of all subprojects.'
        group = JavaBasePlugin.DOCUMENTATION_GROUP
        dependsOn subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc

        source subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc.source
        destinationDir file("$buildDir/docs/javadoc")
        classpath = files(subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc.classpath)
    }
}




