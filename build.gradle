buildscript {
    repositories {
        mavenCentral()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
        classpath "io.eventuate.plugins.gradle:eventuate-plugins-gradle-publish:$eventuatePluginsGradleVersion"
    }
}

apply plugin: 'docker-compose'
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublish"

allprojects {
    group = "io.eventuate.messaging.kafka"
}

subprojects {
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }

    if (!project.name.endsWith("-bom"))
        dependencies {
            implementation "org.slf4j:slf4j-api:$slf4jApiVersion"
            testImplementation "org.assertj:assertj-core:$assertjVersion"
            testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
            testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformLauncherVersion"
        }
}

gradle.projectsEvaluated {
    task aggregateJavaDocs(type: Javadoc) {
        description = 'Aggregated Javadoc API documentation of all subprojects.'
        group = JavaBasePlugin.DOCUMENTATION_GROUP

        destinationDir file("$buildDir/docs/javadoc")
    }
}

dockerCompose {
    projectName = null
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
}
tasks.withType(Test).configureEach {
    useJUnitPlatform()
}
